type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    import java.util.*;

    public class Main {
        public static void main(String[] args) {

            GameHandler bullsAndCows = new GameHandler();
            bullsAndCows.makeGuess();

        }
    }


    //        Scanner scanner = new Scanner(System.in);
    //        ArrayList<Integer> secretCode = new ArrayList<>();
    //        ArrayList<Integer> userGuess = new ArrayList<>();
    //
    //        generateSecretCode(secretCode);
    //        String secCode = getSecretCodeString(secretCode);
    //
    //        int number = scanner.nextInt();
    //        convertUserGuess(number, userGuess);
    //
    //        int cows = getCows(secretCode, userGuess);
    //        int bulls = getBulls(secretCode, userGuess);
    //
    //        if (cows > 0 && bulls > 0) {
    //            System.out.println("Grade: " + bulls + " bull(s) and " + cows + " cow(s). The secret code is "
    //                    + secCode);
    //        }
    //        else if (cows > 0) {
    //            System.out.println("Grade: " + cows + " cow(s). The secret code is "
    //                    + secCode);
    //        }
    //        else System.out.println("None. The secret code is "
    //                    + secCode);

    //
    //    public static void generateSecretCode (ArrayList<Integer> secretCode){
    //        Random random = new Random();
    //        for (int i = 0; i < 4; i++){
    //            int number = random.nextInt(10);
    //            if (!secretCode.contains(number)) {
    //                secretCode.add(number);
    //            }
    //            else i--;
    //        }
    //    }
    //
    //    public static String getSecretCodeString (ArrayList<Integer> secretCode) {
    //        StringBuilder s = new StringBuilder();
    //        for (Integer integer: secretCode){
    //            s.append(integer.toString());
    //        }
    //        return s.toString();
    //    }

    //class Number {
    //    int number;
    //
    //    public Number(int number) {
    //        this.number = number;
    //
    //    }
    //
    //    public int getNumber() {
    //        return number;
    //    }
    //}
  learner_created: false
- name: src/bullscows/GameHandler.java
  visible: true
  text: |
    package bullscows;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class GameHandler {
        Scanner scanner = new Scanner(System.in);
        private int secretCodeInt = 5721;
        ArrayList<Integer> secretCode = new ArrayList<>();

        public GameHandler() {
            createSecretCode();
        }

        private void createSecretCode () {
            secretCode.add(5);
            secretCode.add(7);
            secretCode.add(2);
            secretCode.add(1);
        }

        public void makeGuess () {
            int input = scanner.nextInt();
            Grader grader = new Grader(this.secretCode, input);
            grader.checkGuess();
            System.out.printf("Grade: %s. The secret code is %d.", grader.printGuess(), this.secretCodeInt);
        }
    }
  learner_created: false
- name: src/bullscows/Grader.java
  visible: true
  text: |
    package bullscows;

    import java.util.ArrayList;
    import java.util.Collections;

    public class Grader {
        private final ArrayList<Integer> secretCode;
        private final ArrayList<Integer> userGuess = new ArrayList<>();
        private int userInput;
        private int bulls = 0;
        private int cows = 0;

        public Grader(ArrayList<Integer> secretCode, int userInput) {
            this.secretCode = secretCode;
            this.userInput = userInput;
            convertUserInput();

        }

        public int getBulls() {
            return bulls;
        }

        public int getCows() {
            return cows;
        }

        public void checkGuess () {
            for (int i = 0; i < userGuess.size(); i++) {
                if (userGuess.get(i).equals(secretCode.get(i))) {
                    this.bulls++;
                }
            }
            for (Integer guessDigit: userGuess){
                if (secretCode.contains(guessDigit)){
                    this.cows++;
                }
            }
            cows -= bulls;
        }

        public String printGuess () {
            if (this.bulls == 0 && this.cows == 0) {
                return "None";
            }
            else if (this.bulls == 0) {
                return this.cows + " cow(s)";
            }
            else if (this.cows == 0) {
                return this.bulls + " bull(s)";
            }
            else return this.bulls + " bull(s) and " + this.cows + " cow(s)";
        }

        private void convertUserInput () {
            int length = (int)(Math.log10(userInput)+1);
            for (int i = 0; i < length; i++){
                userGuess.add(userInput%10);
                userInput /= 10;
            }
            Collections.reverse(userGuess);
            System.out.println(userGuess);
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/53/stages/289/implement#comment
status: Solved
record: 2
